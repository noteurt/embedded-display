
GccApplicationLCDFunct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  000003d2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001424  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a78  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a9  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051e  00000000  00000000  00002dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a54  00000000  00000000  000032e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_1>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 ed       	ldi	r30, 0xD2	; 210
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 34       	cpi	r26, 0x4A	; 74
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  a2:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	00 00       	nop
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	08 95       	ret

000000ba <lcd_write>:
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	d8 2f       	mov	r29, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x12>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x18>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	8f 60       	ori	r24, 0x0F	; 15
  dc:	84 b9       	out	0x04, r24	; 4
  de:	c5 b1       	in	r28, 0x05	; 5
  e0:	c0 7f       	andi	r28, 0xF0	; 240
  e2:	8d 2f       	mov	r24, r29
  e4:	82 95       	swap	r24
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	8c 2b       	or	r24, r28
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
  f0:	df 70       	andi	r29, 0x0F	; 15
  f2:	dc 2b       	or	r29, r28
  f4:	d5 b9       	out	0x05, r29	; 5
  f6:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
  fa:	cf 60       	ori	r28, 0x0F	; 15
  fc:	c5 b9       	out	0x05, r28	; 5
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_read>:
 104:	88 23       	and	r24, r24
 106:	21 f0       	breq	.+8      	; 0x110 <lcd_read+0xc>
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_read+0x12>
 110:	85 b1       	in	r24, 0x05	; 5
 112:	8f 7e       	andi	r24, 0xEF	; 239
 114:	85 b9       	out	0x05, r24	; 5
 116:	85 b1       	in	r24, 0x05	; 5
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	84 b9       	out	0x04, r24	; 4
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 64       	ori	r24, 0x40	; 64
 126:	85 b9       	out	0x05, r24	; 5
 128:	00 00       	nop
 12a:	93 b1       	in	r25, 0x03	; 3
 12c:	92 95       	swap	r25
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	85 b9       	out	0x05, r24	; 5
 136:	00 00       	nop
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	00 00       	nop
 140:	83 b1       	in	r24, 0x03	; 3
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	25 b1       	in	r18, 0x05	; 5
 146:	2f 7b       	andi	r18, 0xBF	; 191
 148:	25 b9       	out	0x05, r18	; 5
 14a:	89 2b       	or	r24, r25
 14c:	08 95       	ret

0000014e <lcd_waitbusy>:
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 82 00 	call	0x104	; 0x104 <lcd_read>
 154:	88 23       	and	r24, r24
 156:	dc f3       	brlt	.-10     	; 0x14e <lcd_waitbusy>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_waitbusy+0xc>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_waitbusy+0xe>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 82 00 	call	0x104	; 0x104 <lcd_read>
 162:	08 95       	ret

00000164 <lcd_command>:
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
 168:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_waitbusy>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8c 2f       	mov	r24, r28
 170:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_clrscr>:
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
 17e:	08 95       	ret

00000180 <lcd_putc>:
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_waitbusy>
 188:	ca 30       	cpi	r28, 0x0A	; 10
 18a:	49 f4       	brne	.+18     	; 0x19e <lcd_putc+0x1e>
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	10 f4       	brcc	.+4      	; 0x194 <lcd_putc+0x14>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_putc+0x16>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	80 58       	subi	r24, 0x80	; 128
 198:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <lcd_putc+0x26>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_puts>:
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	fc 01       	movw	r30, r24
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_puts+0xe>
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 1b6:	fe 01       	movw	r30, r28
 1b8:	ef 01       	movw	r28, r30
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
 1be:	81 11       	cpse	r24, r1
 1c0:	f8 cf       	rjmp	.-16     	; 0x1b2 <lcd_puts+0x8>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c8:	cf 93       	push	r28
 1ca:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	8f 67       	ori	r24, 0x7F	; 127
 1d0:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0xe>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_init+0x14>
 1dc:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	85 b9       	out	0x05, r24	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	85 b9       	out	0x05, r24	; 5
    lcd_e_toggle();
 1ea:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
 1ee:	81 ee       	ldi	r24, 0xE1	; 225
 1f0:	94 e0       	ldi	r25, 0x04	; 4
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x2a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_init+0x30>
 1f8:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1fa:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
 1fe:	95 e1       	ldi	r25, 0x15	; 21
 200:	9a 95       	dec	r25
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x38>
 204:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 206:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
 20a:	85 e1       	ldi	r24, 0x15	; 21
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init+0x44>
 210:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 212:	85 b1       	in	r24, 0x05	; 5
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	85 b9       	out	0x05, r24	; 5
    lcd_e_toggle();
 218:	0e 94 55 00 	call	0xaa	; 0xaa <toggle_e>
 21c:	95 e1       	ldi	r25, 0x15	; 21
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x56>
 222:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 224:	88 e2       	ldi	r24, 0x28	; 40
 226:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 230:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_command>

}/* lcd_init */
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <wait_until_key_pressed>:
void wait_until_key_pressed(void)
{
    unsigned char temp1, temp2;
    
    do {
        temp1 = PIND;                  // read input
 244:	99 b1       	in	r25, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	e7 ea       	ldi	r30, 0xA7	; 167
 248:	f1 e6       	ldi	r31, 0x61	; 97
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <wait_until_key_pressed+0x6>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <wait_until_key_pressed+0xc>
 250:	00 00       	nop
        _delay_ms(5);                  // delay for key debounce
        temp2 = PIND;                  // read input
 252:	89 b1       	in	r24, 0x09	; 9
        temp1 = (temp1 & temp2);      // debounce input
 254:	89 23       	and	r24, r25
    } while ( temp1 & _BV(PIND1) );
 256:	81 fd       	sbrc	r24, 1
 258:	f5 cf       	rjmp	.-22     	; 0x244 <wait_until_key_pressed>
    lcd_puts("> YES");
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 262:	ff e3       	ldi	r31, 0x3F	; 63
 264:	2d e0       	ldi	r18, 0x0D	; 13
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	f1 50       	subi	r31, 0x01	; 1
 26a:	20 40       	sbci	r18, 0x00	; 0
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <wait_until_key_pressed+0x24>
 270:	00 c0       	rjmp	.+0      	; 0x272 <wait_until_key_pressed+0x2e>
 272:	00 00       	nop
	_delay_ms(50); 
	lcd_clrscr();
 274:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
	lcd_puts("ME TOO :)");
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 280:	9f e3       	ldi	r25, 0x3F	; 63
 282:	ed e0       	ldi	r30, 0x0D	; 13
 284:	f3 e0       	ldi	r31, 0x03	; 3
 286:	91 50       	subi	r25, 0x01	; 1
 288:	e0 40       	sbci	r30, 0x00	; 0
 28a:	f0 40       	sbci	r31, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <wait_until_key_pressed+0x42>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <wait_until_key_pressed+0x4c>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <main>:
{
    char buffer[7];
    int  num=134;
    unsigned char i;
	
	EIMSK = (1<<INT0);
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 298:	78 94       	sei
    //DDRD &= ~(1 << PD2);        /* Pin PD2 input              */
    //PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_init>
	
	/* put string to display (line 1) with linefeed */
	lcd_puts("DO ");
 2a0:	80 e1       	ldi	r24, 0x10	; 16
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 2a8:	2f e3       	ldi	r18, 0x3F	; 63
 2aa:	8d e0       	ldi	r24, 0x0D	; 13
 2ac:	93 e0       	ldi	r25, 0x03	; 3
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x1a>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x24>
 2b8:	00 00       	nop
	_delay_ms(50);
	lcd_puts("YOU ");
 2ba:	84 e1       	ldi	r24, 0x14	; 20
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 2c2:	2f e3       	ldi	r18, 0x3F	; 63
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	93 e0       	ldi	r25, 0x03	; 3
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x34>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x3e>
 2d2:	00 00       	nop
	_delay_ms(50);
	lcd_puts("LOVE ");
 2d4:	89 e1       	ldi	r24, 0x19	; 25
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 2dc:	2f e3       	ldi	r18, 0x3F	; 63
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	93 e0       	ldi	r25, 0x03	; 3
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x4e>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x58>
 2ec:	00 00       	nop
	_delay_ms(50);
	lcd_puts("SEB");
 2ee:	8f e1       	ldi	r24, 0x1F	; 31
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 2f6:	2f e3       	ldi	r18, 0x3F	; 63
 2f8:	8d e0       	ldi	r24, 0x0D	; 13
 2fa:	93 e0       	ldi	r25, 0x03	; 3
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x68>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x72>
 306:	00 00       	nop
	_delay_ms(50);
	lcd_puts("?\n");
 308:	87 e4       	ldi	r24, 0x47	; 71
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 310:	2f e3       	ldi	r18, 0x3F	; 63
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	93 e0       	ldi	r25, 0x03	; 3
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x82>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x8c>
 320:	00 00       	nop

       
        
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 322:	0e 94 22 01 	call	0x244	; 0x244 <wait_until_key_pressed>
 326:	fd cf       	rjmp	.-6      	; 0x322 <main+0x8e>

00000328 <__vector_1>:
              
    }
}

ISR(INT0_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	unsigned char temp1, temp2;
	lcd_puts("> NO!");
 34a:	83 e2       	ldi	r24, 0x23	; 35
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 352:	2f e3       	ldi	r18, 0x3F	; 63
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	93 e0       	ldi	r25, 0x03	; 3
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <__vector_1+0x30>
 360:	00 c0       	rjmp	.+0      	; 0x362 <__vector_1+0x3a>
 362:	00 00       	nop
	_delay_ms(50);
	lcd_clrscr();
 364:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
	lcd_puts("WRONG");
 368:	89 e2       	ldi	r24, 0x29	; 41
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 370:	2f e3       	ldi	r18, 0x3F	; 63
 372:	8d e0       	ldi	r24, 0x0D	; 13
 374:	93 e0       	ldi	r25, 0x03	; 3
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <__vector_1+0x4e>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <__vector_1+0x58>
 380:	00 00       	nop
	_delay_ms(50);
	lcd_clrscr();
 382:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
	lcd_puts("GO AGAIN");
 386:	8f e2       	ldi	r24, 0x2F	; 47
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 38e:	2f e3       	ldi	r18, 0x3F	; 63
 390:	8d e0       	ldi	r24, 0x0D	; 13
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <__vector_1+0x6c>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <__vector_1+0x76>
 39e:	00 00       	nop
	_delay_ms(50);
	lcd_clrscr();
 3a0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
	
	lcd_puts("DO YOU LOVE SEB?\n");
 3a4:	88 e3       	ldi	r24, 0x38	; 56
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
